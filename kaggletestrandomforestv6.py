# -*- coding: utf-8 -*-
"""KaggleTestRandomForestv6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1etRUepXpBcZnCsly9pp2av99LFci3V7Y
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

#Load Dataset

df = pd.read_csv('kaggle_survey_2022_responses.csv')

# Step 4: Exclude the Second Row

df = df.drop(0)
df = df.reset_index(drop=True)

df = df.drop(index=df.index[10000:])
df = df.reset_index(drop=True)

df

df = df.dropna(subset=['Q29'])

# select columns

X = df[['Q11', 'Q30', 'Q27', 'Q26', 'Q23']]
Y = df['Q29']

# Step 7: Convert Categorical Data

X_encoded = pd.get_dummies(X)

salary_mapping = {
    '25,000-29,999': 27500,
    '100,000-124,999': 112500,
    '200,000-249,999': 225000,
    '150,000-199,999': 175000,
    '90,000-99,999': 95000,
    '30,000-39,999': 35000,
    '3,000-3,999': 3500,
    '50,000-59,999': 55000,
    '125,000-149,999': 137500,
    '15,000-19,999': 17500,
    '5,000-7,499': 6250,
    '10,000-14,999': 12500,
    '20,000-24,999': 22500,
    '$0-999': 500,
    '7,500-9,999': 8750,
    '4,000-4,999': 4500,
    '80,000-89,999': 85000,
    '2,000-2,999': 2500,
    '250,000-299,999': 275000,
    '1,000-1,999': 1500,
    '$500,000-999,999': 750000,
    '70,000-79,999': 75000,
    '60,000-69,999': 65000,
    '40,000-49,999': 45000,
    '>$1,000,000': 1000000,
    '300,000-499,999': 400000,
}

Y = Y.map(salary_mapping)

X_train, X_test, Y_train, Y_test = train_test_split(X_encoded, Y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, Y_train)

predictions = model.predict(X_test)
mse = mean_squared_error(Y_test, predictions)
print(f'Mean Squared Error: {mse}')

plt.scatter(Y_test, predictions)
plt.xlabel('Actual Salary')
plt.ylabel('Predicted Salary')
plt.title('Actual vs. Predicted Salary')
plt.show()

import pickle

# Save the model
with open('New_Random_Forest.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

import pickle

# Load the model
with open('New_Random_Forest.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

import pickle
import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor  # Import the RandomForestRegressor

# Load the model
with open('New_Random_Forest.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

# Check the type of the loaded object
print(type(model))  # Print the type of the loaded object

def main():
    st.title("Salary Prediction App")

    # Collect user input
    q11 = st.slider("For how many years have you been writing code and/or programming?", 0, 40, 20)
    q30 = st.slider("how much money have you spent on machine learning and/or cloud computing services at home or at work in the past 5 years", 0, 40, 20)
    q27 = st.slider("Does your current employer incorporate machine learning methods into their business?", 0, 40, 20)
    st.text("1)We recently started using ML methods (i.e., models in production for less than 2 years) 2) We have well established ML methods (i.e., models in production for more than 2 years) 3) We are exploring ML methods (and may one day put a model into production) 4)I do not know 5) We use ML methods for generating insights (but do not put working models into production) 6)No (we do not use ML methods)")
    q26 = st.slider("Approximately how many individuals are responsible for data science workloads at your place of business?", 0, 40, 20)
    q23 = st.slider("Select the title most similar to your current role", 0, 40, 20)
    st.text("1)Data Scientist 2)Software Engineer 3)Research Scientist 4)Other 5)Developer Advocate 6)Data Analyst (Business, Marketing, Financial, Quantitative, etc) 7)Data Engineer 8)Currently not employed 9)Machine Learning/ MLops Engineer 10)Engineer (non-software) 11)Teacher / professor 12)Statistician 13)Manager (Program, Project, Operations, Executive-level, etc) 14)Data Administrator 15)Data Architect")

    # Create a DataFrame with user input
    input_data = pd.DataFrame({
        'Q11': [q11],
        'Q30': [q30],
        'Q27': [q27],
        'Q26': [q26],
        'Q23': [q23]
    })

# One-hot encode the input data
    input_data_encoded = pd.get_dummies(input_data)

    # Ensure input columns match training columns
    missing_cols = set(X_train.columns) - set(input_data_encoded.columns)
    for col in missing_cols:
        input_data_encoded[col] = 0

    # Reorder columns to match the order during training
    input_data_encoded = input_data_encoded[X_train.columns]

    # Make predictions
    prediction = model.predict(input_data_encoded)
    st.subheader("Prediction:")
    st.write(f"The predicted salary is: {prediction[0]:.2f}")


if __name__ == '__main__':
    main()

